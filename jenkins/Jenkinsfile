pipeline {
  agent any
  environment {
    AWS_DEFAULT_REGION = "ap-south-1"
    ECR_REPO          = "myapp"
    CLUSTER_NAME      = "demo-eks"
  }
  stages {
    stage('Checkout') {
      steps { git branch: 'main', url: 'https://github.com/anikettalwekar/aws-devops-eks-project.git' }
    }
    stage('Build Docker') {
      steps { sh 'docker build -t $ECR_REPO:latest app' }
    }
    stage('Login to ECR') {
      steps {
        withAWS(region: env.AWS_DEFAULT_REGION, credentials: 'aws-creds') {
          sh 'aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com'
        }
      }
    }
    stage('Tag & Push') {
      steps {
        script {
          def acct = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
          env.IMAGE_URI = "${acct}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO}:latest"
          sh """
            docker tag ${ECR_REPO}:latest ${IMAGE_URI}
            docker push ${IMAGE_URI}
          """
        }
      }
    }
    stage('Deploy to EKS') {
      steps {
        withAWS(region: env.AWS_DEFAULT_REGION, credentials: 'aws-creds') {
          sh """
            aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
            sed -i 's#290690313212.dkr.ecr.ap-south-1.amazonaws.com/myapp:latest#${IMAGE_URI}#' k8s/deployment.yaml
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
          """
        }
      }
    }
  }
}
